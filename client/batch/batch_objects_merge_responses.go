//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package batch

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/weaviate/weaviate/entities/models"
)

// BatchObjectsMergeReader is a Reader for the BatchObjectsMerge structure.
type BatchObjectsMergeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BatchObjectsMergeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBatchObjectsMergeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewBatchObjectsMergeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewBatchObjectsMergeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewBatchObjectsMergeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewBatchObjectsMergeUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewBatchObjectsMergeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewBatchObjectsMergeOK creates a BatchObjectsMergeOK with default headers values
func NewBatchObjectsMergeOK() *BatchObjectsMergeOK {
	return &BatchObjectsMergeOK{}
}

/*
BatchObjectsMergeOK describes a response with status code 200, with default header values.

Request succeeded, see response body to get detailed information about each batched item.
*/
type BatchObjectsMergeOK struct {
	Payload []*models.ObjectsGetResponse
}

// IsSuccess returns true when this batch objects merge o k response has a 2xx status code
func (o *BatchObjectsMergeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this batch objects merge o k response has a 3xx status code
func (o *BatchObjectsMergeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this batch objects merge o k response has a 4xx status code
func (o *BatchObjectsMergeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this batch objects merge o k response has a 5xx status code
func (o *BatchObjectsMergeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this batch objects merge o k response a status code equal to that given
func (o *BatchObjectsMergeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the batch objects merge o k response
func (o *BatchObjectsMergeOK) Code() int {
	return 200
}

func (o *BatchObjectsMergeOK) Error() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsMergeOK  %+v", 200, o.Payload)
}

func (o *BatchObjectsMergeOK) String() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsMergeOK  %+v", 200, o.Payload)
}

func (o *BatchObjectsMergeOK) GetPayload() []*models.ObjectsGetResponse {
	return o.Payload
}

func (o *BatchObjectsMergeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBatchObjectsMergeBadRequest creates a BatchObjectsMergeBadRequest with default headers values
func NewBatchObjectsMergeBadRequest() *BatchObjectsMergeBadRequest {
	return &BatchObjectsMergeBadRequest{}
}

/*
BatchObjectsMergeBadRequest describes a response with status code 400, with default header values.

Malformed request.
*/
type BatchObjectsMergeBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this batch objects merge bad request response has a 2xx status code
func (o *BatchObjectsMergeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this batch objects merge bad request response has a 3xx status code
func (o *BatchObjectsMergeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this batch objects merge bad request response has a 4xx status code
func (o *BatchObjectsMergeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this batch objects merge bad request response has a 5xx status code
func (o *BatchObjectsMergeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this batch objects merge bad request response a status code equal to that given
func (o *BatchObjectsMergeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the batch objects merge bad request response
func (o *BatchObjectsMergeBadRequest) Code() int {
	return 400
}

func (o *BatchObjectsMergeBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsMergeBadRequest  %+v", 400, o.Payload)
}

func (o *BatchObjectsMergeBadRequest) String() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsMergeBadRequest  %+v", 400, o.Payload)
}

func (o *BatchObjectsMergeBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *BatchObjectsMergeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBatchObjectsMergeUnauthorized creates a BatchObjectsMergeUnauthorized with default headers values
func NewBatchObjectsMergeUnauthorized() *BatchObjectsMergeUnauthorized {
	return &BatchObjectsMergeUnauthorized{}
}

/*
BatchObjectsMergeUnauthorized describes a response with status code 401, with default header values.

Unauthorized or invalid credentials.
*/
type BatchObjectsMergeUnauthorized struct {
}

// IsSuccess returns true when this batch objects merge unauthorized response has a 2xx status code
func (o *BatchObjectsMergeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this batch objects merge unauthorized response has a 3xx status code
func (o *BatchObjectsMergeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this batch objects merge unauthorized response has a 4xx status code
func (o *BatchObjectsMergeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this batch objects merge unauthorized response has a 5xx status code
func (o *BatchObjectsMergeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this batch objects merge unauthorized response a status code equal to that given
func (o *BatchObjectsMergeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the batch objects merge unauthorized response
func (o *BatchObjectsMergeUnauthorized) Code() int {
	return 401
}

func (o *BatchObjectsMergeUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsMergeUnauthorized ", 401)
}

func (o *BatchObjectsMergeUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsMergeUnauthorized ", 401)
}

func (o *BatchObjectsMergeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBatchObjectsMergeForbidden creates a BatchObjectsMergeForbidden with default headers values
func NewBatchObjectsMergeForbidden() *BatchObjectsMergeForbidden {
	return &BatchObjectsMergeForbidden{}
}

/*
BatchObjectsMergeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type BatchObjectsMergeForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this batch objects merge forbidden response has a 2xx status code
func (o *BatchObjectsMergeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this batch objects merge forbidden response has a 3xx status code
func (o *BatchObjectsMergeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this batch objects merge forbidden response has a 4xx status code
func (o *BatchObjectsMergeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this batch objects merge forbidden response has a 5xx status code
func (o *BatchObjectsMergeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this batch objects merge forbidden response a status code equal to that given
func (o *BatchObjectsMergeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the batch objects merge forbidden response
func (o *BatchObjectsMergeForbidden) Code() int {
	return 403
}

func (o *BatchObjectsMergeForbidden) Error() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsMergeForbidden  %+v", 403, o.Payload)
}

func (o *BatchObjectsMergeForbidden) String() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsMergeForbidden  %+v", 403, o.Payload)
}

func (o *BatchObjectsMergeForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *BatchObjectsMergeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBatchObjectsMergeUnprocessableEntity creates a BatchObjectsMergeUnprocessableEntity with default headers values
func NewBatchObjectsMergeUnprocessableEntity() *BatchObjectsMergeUnprocessableEntity {
	return &BatchObjectsMergeUnprocessableEntity{}
}

/*
BatchObjectsMergeUnprocessableEntity describes a response with status code 422, with default header values.

Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?
*/
type BatchObjectsMergeUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this batch objects merge unprocessable entity response has a 2xx status code
func (o *BatchObjectsMergeUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this batch objects merge unprocessable entity response has a 3xx status code
func (o *BatchObjectsMergeUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this batch objects merge unprocessable entity response has a 4xx status code
func (o *BatchObjectsMergeUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this batch objects merge unprocessable entity response has a 5xx status code
func (o *BatchObjectsMergeUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this batch objects merge unprocessable entity response a status code equal to that given
func (o *BatchObjectsMergeUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the batch objects merge unprocessable entity response
func (o *BatchObjectsMergeUnprocessableEntity) Code() int {
	return 422
}

func (o *BatchObjectsMergeUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsMergeUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *BatchObjectsMergeUnprocessableEntity) String() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsMergeUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *BatchObjectsMergeUnprocessableEntity) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *BatchObjectsMergeUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBatchObjectsMergeInternalServerError creates a BatchObjectsMergeInternalServerError with default headers values
func NewBatchObjectsMergeInternalServerError() *BatchObjectsMergeInternalServerError {
	return &BatchObjectsMergeInternalServerError{}
}

/*
BatchObjectsMergeInternalServerError describes a response with status code 500, with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type BatchObjectsMergeInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this batch objects merge internal server error response has a 2xx status code
func (o *BatchObjectsMergeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this batch objects merge internal server error response has a 3xx status code
func (o *BatchObjectsMergeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this batch objects merge internal server error response has a 4xx status code
func (o *BatchObjectsMergeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this batch objects merge internal server error response has a 5xx status code
func (o *BatchObjectsMergeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this batch objects merge internal server error response a status code equal to that given
func (o *BatchObjectsMergeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the batch objects merge internal server error response
func (o *BatchObjectsMergeInternalServerError) Code() int {
	return 500
}

func (o *BatchObjectsMergeInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsMergeInternalServerError  %+v", 500, o.Payload)
}

func (o *BatchObjectsMergeInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsMergeInternalServerError  %+v", 500, o.Payload)
}

func (o *BatchObjectsMergeInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *BatchObjectsMergeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
BatchObjectsMergeBody batch objects merge body
swagger:model BatchObjectsMergeBody
*/
type BatchObjectsMergeBody struct {

	// objects
	Objects []*models.Object `json:"objects"`
}

// Validate validates this batch objects merge body
func (o *BatchObjectsMergeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BatchObjectsMergeBody) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(o.Objects) { // not required
		return nil
	}

	for i := 0; i < len(o.Objects); i++ {
		if swag.IsZero(o.Objects[i]) { // not required
			continue
		}

		if o.Objects[i] != nil {
			if err := o.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this batch objects merge body based on the context it is used
func (o *BatchObjectsMergeBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BatchObjectsMergeBody) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Objects); i++ {

		if o.Objects[i] != nil {
			if err := o.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *BatchObjectsMergeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BatchObjectsMergeBody) UnmarshalBinary(b []byte) error {
	var res BatchObjectsMergeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
